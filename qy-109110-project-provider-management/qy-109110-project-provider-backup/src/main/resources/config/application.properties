server.port=8081
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/qy_109110?useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

mybatis.type-aliases-package=com.aaa.lyf.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

# 下面的配置比较常用
# 当项目运行的时候，会自动加载sql文件，去生成数据库表以及表数据(前提是你的数据库必须存在)
# 初始化数据库
# 初始化的表和表中的数据官方的意思是让你分开写，但是后来我发现合在一起写也行
# 官方文档的意思schema只能让你初始化表
spring.datasource.schema=classpath:sql/qy_109110.sql
# data才是初始化数据用的
# spring.datasource.data=

# always：每一次启动项目都会加载sql文件，初始化数据库
# never: 每次启动项目都不会加载sql文件
# embedded：加载内存数据库(非关系型数据库(redis...))
spring.datasource.initialization-mode=always


# 配置eureka的注册中心地址(方便于自己向eureka中去注册)
# 在consumer中有一个restTemplate(模拟http协议)--->http://localhost:8081/all
# 之后就不会再使用真实地址来调用
eureka.client.service-url.defaultZone=http://eureka6081:6081/eureka,http://eureka6082:6082/eureka,http://eureka6083:6083/eureka

# 配置eureka的实例id(和数据库的主键一样，在同一个集群eureka中是绝对不允许重复的)
# 官方文档中是没有要求限制的，怎么写可以
# 但是咱们规定一下，这个值必须要体现provider的功能以及provider的端口号
# 予人玫瑰手有余香
# 张三正在开发book-provider
# 李四正在开发order-provider
# 这么去写其实并不是方便自己，只是让自己队友知道目前自己正在开发什么功能，方便队友操作
eureka.instance.instance-id=book-interface-8081
# todo eureka的一系列配置我就不配了，你们自己配

# 通用mapper的配置
# 因为通用mapper并不只是支持MySQL，所以当需要使用自增主键的时候需要指定数据库的类型
mapper.identity=MYSQL
# 配置通用mapper的基础类
mapper.mappers=tk.mybatis.mapper.common.Mapper
# <update> update set user where 1 = 1 <if test='username != null'> and username = #{username} </if> </update>
mapper.not-empty=true
# 因为项目中大量使用到了枚举，但是通用mapper并不认识枚举，所以需要把枚举让他默认自动转换为基础类型处理
mapper.enum-as-simple-type=true

# pagehelper分页插件
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true